# Zadanie 1

import socket
import time

def z1(host="time-a-wwv.nist.gov", port=13):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        sock.connect((host, port))
        
        data = sock.recv(1024)
        data = data.decode('ascii')
        data = data.split(" ")
        date = data[1]
        time= data[2]
        print(f"Data: {date}, godzina: {time}")
      

    except socket.timeout:
        print(f"Connection to {host} timed out.")
        return None
    except ConnectionRefusedError:
        print(f"Connection refused by {host}.")
        return None    
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
    finally:
        sock.close()

z1()

# Zadanie 2

import socket
import random

def send_receive_message(host, port, message):

  try:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
      s.connect((host, port))
      s.sendall(message.encode())
      data = s.recv(1024)
    return data.decode()

  except ConnectionRefusedError:
    print(f"Connection refused to {host}:{port}")
    return None
  except Exception as e:
    print(f"An error occurred: {e}")
    return None

if __name__ == "__main__":
  host = '212.182.24.27'
  port = 2900
  message = "hello"
  response = send_receive_message(host, port, random_message)

  if response:
    print(f"Sent: {random_message}")
    print(f"Received: {response}")


# Zadanie 3

import socket
import random

def send_receive_message(host, port, message):

  try:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
      s.connect((host, port))
      while True:
        message = input("Enter a message to send (or 'exit' to quit): ")
        if message.lower() == 'exit':
          break
        s.sendall(message.encode())
        data = s.recv(1024)
        print(data.decode())

  except ConnectionRefusedError:
    print(f"Connection refused to {host}:{port}")
    return None
  except Exception as e:
    print(f"An error occurred: {e}")
    return None

if __name__ == "__main__":
  host = '212.182.24.27'
  port = 2900
  
  message = "hello"
  response = send_receive_message(host, port, random_message)

  if response:
    print(f"Sent: {random_message}")
    print(f"Received: {response}")

# Zadanie 4

import socket

def udp_client(host, port, message):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(message.encode(), (host, port))
    data, addr = sock.recvfrom(1024)  
    sock.close()
    return data.decode()

HOST = "212.182.24.27"
PORT = 2901
MESSAGE = "Hello"

try:
    received_message = udp_client(HOST, PORT, MESSAGE)
    print("Received:", received_message)
except Exception as e:
    print(f"Error: {e}")


# Zadanie 5

import socket
import random

def send_receive_message(host, port, message):

  try:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
      s.connect((host, port))
      while True:
        message = input("Enter a message to send (or 'exit' to quit): ")
        if message.lower() == 'exit':
          break
        s.sendall(message.encode())
        data = s.recv(1024)
        print(data.decode())

  except ConnectionRefusedError:
    print(f"Connection refused to {host}:{port}")
    return None
  except Exception as e:
    print(f"An error occurred: {e}")
    return None

if __name__ == "__main__":
  host = '212.182.24.27'
  port = 2900
  
  message = "hello"
  response = send_receive_message(host, port, random_message)

  if response:
    print(f"Sent: {random_message}")
    print(f"Received: {response}")

